# -*- coding: utf-8 -*-
"""
Created on Sun May  7 00:46:17 2023

@author: marcos

This code snippet demonstrates the implementation of a simple moving average (SMA)
trading strategy and the backtesting of the strategy using historical stock price data.

Backtesting is a process used in finance and investment to evaluate the performance of
a trading or investment strategy using historical data. It involves simulating the execution
of trades or investment decisions on past data to assess how the strategy would have performed
in the past.
"""
# =============================================================================
# ================================= Libraries =================================
# =============================================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# =============================================================================
#                                     Main
# =============================================================================
# Generate sample dataset of daily stock prices
dates = pd.date_range(start='2020-01-01', end='2022-01-01', freq='D')
prices = np.random.normal(loc=100, scale=15, size=len(dates))
df = pd.DataFrame({'Date': dates, 'Price': prices}).set_index('Date')


# Define simple moving average trading strategy
def sma_strategy(data, window=30):
    data['SMA'] = data['Price'].rolling(window=window).mean()
    data['Position'] = np.where(data['Price'] > data['SMA'], 1, -1)
    data['Returns'] = data['Position'].shift(1) * data['Price'].pct_change()
    data['Cumulative Returns'] = (1 + data['Returns']).cumprod()
    return data


# Backtest the simple moving average trading strategy
data = sma_strategy(df)

# Plots the original stock prices and the calculated SMA
fig, ax = plt.subplots(figsize=(12, 8))
ax.plot(data['Price'], label='Price')
ax.plot(data['SMA'], label='SMA')
ax.legend(loc='upper left')
plt.show()

# This plot visualizes the returns generated by the trading strategy and the cumulative returns over time.
fig, ax = plt.subplots(figsize=(12, 8))
ax.plot(data['Returns'], label='Returns')
ax.plot(data['Cumulative Returns'], label='Cumulative Returns')
ax.legend(loc='upper left')
plt.show()
